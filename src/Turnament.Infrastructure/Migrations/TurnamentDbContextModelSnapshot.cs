// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Turnament.Infrastructure;

#nullable disable

namespace Turnament.Infrastructure.Migrations
{
    [DbContext(typeof(TurnamentDbContext))]
    partial class TurnamentDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Turnament.Domain.Division", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AgeGroup")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RuleSetId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SportId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TournamentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("Divisions");
                });

            modelBuilder.Entity("Turnament.Domain.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DivisionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Turnament.Domain.GroupStanding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Drawn")
                        .HasColumnType("integer");

                    b.Property<int>("FairPlayPoints")
                        .HasColumnType("integer");

                    b.Property<int>("GoalsAgainst")
                        .HasColumnType("integer");

                    b.Property<int>("GoalsFor")
                        .HasColumnType("integer");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<int>("Lost")
                        .HasColumnType("integer");

                    b.Property<int>("Played")
                        .HasColumnType("integer");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.Property<int>("Won")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupStandings");
                });

            modelBuilder.Entity("Turnament.Domain.GroupTeam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GroupId", "TeamId")
                        .IsUnique();

                    b.ToTable("GroupTeams");
                });

            modelBuilder.Entity("Turnament.Domain.Match", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AwayTeamId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DivisionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("HomeTeamId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PitchId")
                        .HasColumnType("uuid");

                    b.Property<int>("Round")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ScheduledStartUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("Turnament.Domain.MatchEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<Guid>("MatchId")
                        .HasColumnType("uuid");

                    b.Property<int>("Minute")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PlayerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("MatchEvents");
                });

            modelBuilder.Entity("Turnament.Domain.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Turnament.Domain.RuleSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AllowPenalties")
                        .HasColumnType("boolean");

                    b.Property<int>("MatchDurationMinutes")
                        .HasColumnType("integer");

                    b.Property<int>("MinRestMinutes")
                        .HasColumnType("integer");

                    b.Property<int>("PointsDraw")
                        .HasColumnType("integer");

                    b.Property<int>("PointsLoss")
                        .HasColumnType("integer");

                    b.Property<int>("PointsWin")
                        .HasColumnType("integer");

                    b.Property<int>("RefRestMinutes")
                        .HasColumnType("integer");

                    b.Property<Guid>("SportId")
                        .HasColumnType("uuid");

                    b.Property<string>("TiebreakerOrder")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RuleSets");
                });

            modelBuilder.Entity("Turnament.Domain.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DivisionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Turnament.Domain.Tournament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("Turnament.Domain.Division", b =>
                {
                    b.HasOne("Turnament.Domain.Tournament", null)
                        .WithMany("Divisions")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Turnament.Domain.Group", b =>
                {
                    b.HasOne("Turnament.Domain.Division", null)
                        .WithMany("Groups")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Turnament.Domain.GroupStanding", b =>
                {
                    b.HasOne("Turnament.Domain.Group", null)
                        .WithMany("Standings")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Turnament.Domain.Match", b =>
                {
                    b.HasOne("Turnament.Domain.Division", null)
                        .WithMany("Matches")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Turnament.Domain.Score", "Score", b1 =>
                        {
                            b1.Property<Guid>("MatchId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Away")
                                .HasColumnType("integer");

                            b1.Property<int>("Home")
                                .HasColumnType("integer");

                            b1.HasKey("MatchId");

                            b1.ToTable("Matches");

                            b1.WithOwner()
                                .HasForeignKey("MatchId");
                        });

                    b.Navigation("Score")
                        .IsRequired();
                });

            modelBuilder.Entity("Turnament.Domain.MatchEvent", b =>
                {
                    b.HasOne("Turnament.Domain.Match", null)
                        .WithMany("Events")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Turnament.Domain.Player", b =>
                {
                    b.HasOne("Turnament.Domain.Team", null)
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Turnament.Domain.Team", b =>
                {
                    b.HasOne("Turnament.Domain.Division", null)
                        .WithMany("Teams")
                        .HasForeignKey("DivisionId");
                });

            modelBuilder.Entity("Turnament.Domain.Division", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Matches");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Turnament.Domain.Group", b =>
                {
                    b.Navigation("Standings");
                });

            modelBuilder.Entity("Turnament.Domain.Match", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Turnament.Domain.Team", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("Turnament.Domain.Tournament", b =>
                {
                    b.Navigation("Divisions");
                });
#pragma warning restore 612, 618
        }
    }
}
